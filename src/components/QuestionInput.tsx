'use client';

import { Question } from '@/types';
import { parseQAMarkdown } from '@/utils/parser';
import { useState } from 'react';

interface QuestionInputProps {
	onQuestionsParsed: (questions: Question[]) => void;
}

type InputMethod = 'file' | 'paste' | 'manual';

export default function QuestionInput({ onQuestionsParsed }: QuestionInputProps) {
	const [inputMethod, setInputMethod] = useState<InputMethod>('file');
	const [isLoading, setIsLoading] = useState(false);
	const [error, setError] = useState<string>('');
	const [pastedText, setPastedText] = useState('');
	const [manualQuestions, setManualQuestions] = useState<Array<{ question: string; answer: string }>>([
		{ question: '', answer: '' },
	]);

	const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
		const file = event.target.files?.[0];
		if (!file) return;

		if (file.type !== 'text/markdown' && !file.name.endsWith('.md')) {
			setError('ูุฑุฌู ุฑูุน ููู .md ุตุญูุญ');
			return;
		}

		setIsLoading(true);
		setError('');

		try {
			const content = await file.text();
			const questions = parseQAMarkdown(content);

			if (questions.length === 0) {
				setError('ูู ูุชู ุงูุนุซูุฑ ุนูู ุฃุณุฆูุฉ ูู ุงูููู');
				return;
			}

			onQuestionsParsed(questions);
		} catch (err) {
			setError('ุญุฏุซ ุฎุทุฃ ูู ูุฑุงุกุฉ ุงูููู');
			console.error(err);
		} finally {
			setIsLoading(false);
		}
	};

	const handlePasteText = () => {
		if (!pastedText.trim()) {
			setError('ูุฑุฌู ูุตู ุงููุต ุฃููุงู');
			return;
		}

		setIsLoading(true);
		setError('');

		try {
			const questions = parseQAMarkdown(pastedText);

			if (questions.length === 0) {
				setError('ูู ูุชู ุงูุนุซูุฑ ุนูู ุฃุณุฆูุฉ ูู ุงููุต ุงููููุตู');
				return;
			}

			onQuestionsParsed(questions);
		} catch (err) {
			setError('ุญุฏุซ ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงููุต');
			console.error(err);
		} finally {
			setIsLoading(false);
		}
	};

	const handleManualSubmit = () => {
		const validQuestions = manualQuestions.filter((q) => q.question.trim() && q.answer.trim());

		if (validQuestions.length === 0) {
			setError('ูุฑุฌู ุฅุฏุฎุงู ุณุคุงู ูุฅุฌุงุจุฉ ูุงุญุฏ ุนูู ุงูุฃูู');
			return;
		}

		const questions: Question[] = validQuestions.map((q, index) => ({
			id: index + 1,
			question: q.question.trim(),
			answer: q.answer.trim(),
		}));

		onQuestionsParsed(questions);
		setError('');
	};

	const addManualQuestion = () => {
		setManualQuestions([...manualQuestions, { question: '', answer: '' }]);
	};

	const removeManualQuestion = (index: number) => {
		if (manualQuestions.length > 1) {
			setManualQuestions(manualQuestions.filter((_, i) => i !== index));
		}
	};

	const updateManualQuestion = (index: number, field: 'question' | 'answer', value: string) => {
		const updated = [...manualQuestions];
		updated[index][field] = value;
		setManualQuestions(updated);
	};

	return (
		<div className='bg-white p-6 rounded-lg shadow-md'>
			<h3 className='text-lg font-semibold mb-4 text-right'>ุฅุฏุฎุงู ุงูุฃุณุฆูุฉ ูุงูุฃุฌูุจุฉ</h3>

			{/* Instructions */}
			<div className='mb-6 p-4 bg-blue-50 rounded-lg border-r-4 border-blue-400'>
				<h4 className='text-sm font-semibold text-blue-800 mb-2 text-right'>๐ก ููููุฉ ุงูุงุณุชุฎุฏุงู</h4>
				<div className='text-xs text-blue-700 text-right space-y-1'>
					<div>
						โข <strong>ุฑูุน ููู:</strong> ูุซุงูู ููุฃุณุฆูุฉ ุงููุซูุฑุฉ (10+ ุฃุณุฆูุฉ)
					</div>
					<div>
						โข <strong>ูุตู ูุต:</strong> ูุซุงูู ูููุณุฎ ูู ูุตุงุฏุฑ ุฃุฎุฑู
					</div>
					<div>
						โข <strong>ุฅุฏุฎุงู ูุฏูู:</strong> ูุซุงูู ููุฃุณุฆูุฉ ุงูููููุฉ (1-5 ุฃุณุฆูุฉ)
					</div>
				</div>
			</div>

			{/* Method Selection */}
			<div className='mb-6'>
				<div className='flex space-x-4 space-x-reverse mb-4'>
					<button
						onClick={() => setInputMethod('file')}
						className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
							inputMethod === 'file'
								? 'bg-blue-600 text-white'
								: 'bg-gray-100 text-gray-700 hover:bg-gray-200'
						}`}
					>
						๐ ุฑูุน ููู
					</button>
					<button
						onClick={() => setInputMethod('paste')}
						className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
							inputMethod === 'paste'
								? 'bg-blue-600 text-white'
								: 'bg-gray-100 text-gray-700 hover:bg-gray-200'
						}`}
					>
						๐ ูุตู ูุต
					</button>
					<button
						onClick={() => setInputMethod('manual')}
						className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
							inputMethod === 'manual'
								? 'bg-blue-600 text-white'
								: 'bg-gray-100 text-gray-700 hover:bg-gray-200'
						}`}
					>
						โ๏ธ ุฅุฏุฎุงู ูุฏูู
					</button>
				</div>
			</div>

			{/* File Upload Method */}
			{inputMethod === 'file' && (
				<div className='w-full space-y-4'>
					<div className='border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-400 transition-colors'>
						<input
							type='file'
							accept='.md,text/markdown'
							onChange={handleFileUpload}
							className='hidden'
							id='file-upload'
							disabled={isLoading}
						/>
						<label htmlFor='file-upload' className='cursor-pointer block'>
							<div className='text-gray-600'>
								{isLoading ? (
									<div className='flex items-center justify-center'>
										<div className='animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500'></div>
										<span className='mr-2'>ุฌุงุฑู ุงููุนุงูุฌุฉ...</span>
									</div>
								) : (
									<>
										<div className='text-4xl mb-2'>๐</div>
										<div className='text-lg font-medium mb-2'>ุงุฑูุน ููู qa.md</div>
										<div className='text-sm text-gray-500'>ุงููุฑ ููุง ุฃู ุงุณุญุจ ุงูููู ุฅูู ููุง</div>
									</>
								)}
							</div>
						</label>
					</div>

					<div className='bg-gray-50 p-4 rounded-lg'>
						<h4 className='text-sm font-semibold text-gray-700 mb-2 text-right'>๐ ุชูุณูู ุงูููู ุงููุทููุจ:</h4>
						<div className='text-xs text-gray-600 text-right space-y-2'>
							<div>
								<strong>ุงูุชูุณูู ุงูุจุณูุท:</strong>
							</div>
							<pre className='bg-white p-2 rounded border text-xs text-right'>
								{`ูุง ูู ุงูุงุฎุชุจุงุฑ ุงูุฐุงุชูุ
ุงูุฅุฌุงุจุฉ: ุทุฑููุฉ ููุชุญูู ูู ูููู ูููุงุฏุฉ ุงูุฏุฑุงุณูุฉ

ูุง ูู ูููุฒุงุช ุงูุงุฎุชุจุงุฑ ุงูุฐุงุชูุ
ุงูุฅุฌุงุจุฉ: ูุณุงุนุฏ ุนูู ุชุซุจูุช ุงููุนูููุงุช ูุงูุชุดุงู ููุงุท ุงูุถุนู`}
							</pre>
							<div>
								<strong>ุงูุชูุณูู ุงููุฑูู:</strong>
							</div>
							<pre className='bg-white p-2 rounded border text-xs text-right'>
								{`1. ูุง ูู ุงูุชุนูู ุงููุดุทุ
   ุงูุฅุฌุงุจุฉ: ุฃุณููุจ ุชุนูู ูุนุชูุฏ ุนูู ุงููุดุงุฑูุฉ ุงููุนุงูุฉ

2. ูุง ูู ุงุณุชุฑุงุชูุฌูุงุช ุงูุฏุฑุงุณุฉุ
   ุงูุฅุฌุงุจุฉ: ุงูุชูุฑุงุฑ ุงููุชุจุงุนุฏ ูุงูุงุฎุชุจุงุฑ ุงูุฐุงุชู`}
							</pre>
						</div>
					</div>
				</div>
			)}

			{/* Paste Text Method */}
			{inputMethod === 'paste' && (
				<div className='space-y-4'>
					<div>
						<label className='block text-sm font-medium text-gray-700 mb-2 text-right'>ูุตู ุงููุต ููุง:</label>
						<textarea
							value={pastedText}
							onChange={(e) => setPastedText(e.target.value)}
							placeholder='ูุง ูู ุงูุงุฎุชุจุงุฑ ุงูุฐุงุชูุ
ุงูุฅุฌุงุจุฉ: ุทุฑููุฉ ููุชุญูู ูู ูููู ูููุงุฏุฉ ุงูุฏุฑุงุณูุฉ

ูุง ูู ูููุฒุงุช ุงูุงุฎุชุจุงุฑ ุงูุฐุงุชูุ
ุงูุฅุฌุงุจุฉ: ูุณุงุนุฏ ุนูู ุชุซุจูุช ุงููุนูููุงุช ูุงูุชุดุงู ููุงุท ุงูุถุนู'
							className='w-full h-40 border border-gray-300 rounded-lg px-3 py-2 text-right resize-none'
							dir='rtl'
						/>
					</div>

					<div className='bg-green-50 p-4 rounded-lg border-r-4 border-green-400'>
						<h4 className='text-sm font-semibold text-green-800 mb-2 text-right'>๐ก ูุตุงุฆุญ ููุตู ุงููุต:</h4>
						<div className='text-xs text-green-700 text-right space-y-1'>
							<div>โข ููููู ูุณุฎ ุงููุต ูู ุฃู ูุตุฏุฑ (Word, PDF, ูููุน ุฅููุชุฑููู)</div>
							<div>โข ุชุฃูุฏ ูู ุฃู ูู ุณุคุงู ูุชุจุนู &quot;ุงูุฅุฌุงุจุฉ:&quot;</div>
							<div>โข ูููู ุงุณุชุฎุฏุงู ุงูุชุฑููู ุฃู ุจุฏููู</div>
							<div>โข ุงุชุฑู ุณุทุฑ ูุงุฑุบ ุจูู ูู ุณุคุงู ูุฅุฌุงุจุฉ</div>
						</div>
					</div>

					<button
						onClick={handlePasteText}
						disabled={isLoading || !pastedText.trim()}
						className='w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors'
					>
						{isLoading ? 'ุฌุงุฑู ุงููุนุงูุฌุฉ...' : 'ูุนุงูุฌุฉ ุงููุต'}
					</button>
				</div>
			)}

			{/* Manual Entry Method */}
			{inputMethod === 'manual' && (
				<div className='space-y-4'>
					<div className='bg-purple-50 p-4 rounded-lg border-r-4 border-purple-400'>
						<h4 className='text-sm font-semibold text-purple-800 mb-2 text-right'>โ๏ธ ุงูุฅุฏุฎุงู ุงููุฏูู:</h4>
						<div className='text-xs text-purple-700 text-right space-y-1'>
							<div>โข ูุซุงูู ููุฃุณุฆูุฉ ุงูููููุฉ (1-5 ุฃุณุฆูุฉ)</div>
							<div>โข ููููู ุฅุถุงูุฉ ุฃู ุญุฐู ุฃุณุฆูุฉ ุญุณุจ ุงูุญุงุฌุฉ</div>
							<div>โข ูู ุณุคุงู ูุฅุฌุงุจุฉ ูู ุญููู ูููุตูุฉ</div>
							<div>โข ููุงุณุจ ููุงุฎุชุจุงุฑุงุช ุงูุณุฑูุนุฉ ูุงููุฑุงุฌุนุงุช</div>
						</div>
					</div>

					<div className='space-y-3'>
						{manualQuestions.map((question, index) => (
							<div key={index} className='border border-gray-200 rounded-lg p-4'>
								<div className='flex justify-between items-center mb-2'>
									<span className='text-sm font-medium text-gray-700'>ุงูุณุคุงู {index + 1}</span>
									{manualQuestions.length > 1 && (
										<button
											onClick={() => removeManualQuestion(index)}
											className='text-red-500 hover:text-red-700 text-sm'
										>
											๐๏ธ ุญุฐู
										</button>
									)}
								</div>
								<input
									type='text'
									value={question.question}
									onChange={(e) => updateManualQuestion(index, 'question', e.target.value)}
									placeholder='ุฃุฏุฎู ุงูุณุคุงู ููุง...'
									className='w-full border border-gray-300 rounded px-3 py-2 text-right mb-2'
									dir='rtl'
								/>
								<textarea
									value={question.answer}
									onChange={(e) => updateManualQuestion(index, 'answer', e.target.value)}
									placeholder='ุฃุฏุฎู ุงูุฅุฌุงุจุฉ ููุง...'
									className='w-full border border-gray-300 rounded px-3 py-2 text-right resize-none'
									rows={2}
									dir='rtl'
								/>
							</div>
						))}
					</div>

					<div className='flex space-x-2 space-x-reverse'>
						<button
							onClick={addManualQuestion}
							className='bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition-colors'
						>
							โ ุฅุถุงูุฉ ุณุคุงู
						</button>
						<button
							onClick={handleManualSubmit}
							disabled={manualQuestions.every((q) => !q.question.trim() || !q.answer.trim())}
							className='flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors'
						>
							ุฅูุดุงุก ุงูุงุฎุชุจุงุฑ
						</button>
					</div>
				</div>
			)}

			{error && (
				<div className='mt-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded text-right'>{error}</div>
			)}
		</div>
	);
}
